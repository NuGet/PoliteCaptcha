@using PoliteCaptcha

@model Sample.SendFeedbackRequest

@{
    ViewBag.Title = "Index";
}
<h2>Sample with fallback to CAPTCHA</h2>
<p>This is a sample send feedback form that uses PoliteCaptcha spam prevention. The spam prevention is intentionally broken in this sample to force fallback to CAPTCHA. (Feel free to use a fake email address; no email is sent, and we aren't saving it anywhere.)</p>
@using (Html.BeginForm("WithAjaxFallback", "Home", FormMethod.Post, new { id = "form1" }))
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Send Feedback</legend>
        @Html.EditorForModel()
        @Html.SpamPreventionAjaxPlaceHolder()
        <p>
            <input type="submit" value="Send" />
        </p>
    </fieldset>
}
<div id="feedback"></div>
@section BottomScripts {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
    @* Intentionally leaving the PoliteCaptcha script to force fallback to CAPTCHA *@
    @*@Html.SpamPreventionScript()*@
    @Html.SpamPreventionAjaxCreationScript()
    <script type="text/javascript">
        $(function () {
            $("#form1").submit(function (e) {
                e.preventDefault();

                $.post("WithAjaxFallback", $("#form1").serialize(),
                function (data) {
                    if (data.Success) {
                        $('#feedback').html(data.Message);
                        $('#form1').hide();
                    } else {
                        if (data.ErrorSource == "PoliteCaptcha") {
                            PoliteCaptchaCreate();
                        }
                    }
                }, "json");
            });
        });
    </script>
}
